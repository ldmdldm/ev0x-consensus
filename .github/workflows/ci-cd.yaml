name: EV0X CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCR_REGISTRY: gcr.io
  IMAGE_NAME: ev0x
  TEE_CONFIG_PATH: deployment/tee_config.yaml

jobs:
  test:
    name: Test and Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 mypy bandit
          
      - name: Lint with flake8
        run: |
          flake8 src tests --count --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Type check with mypy
        run: |
          mypy src
          
      - name: Security scan with bandit
        run: |
          bandit -r src -f json -o bandit-report.json
          
      - name: Run tests with pytest
        run: |
          pytest tests/ --cov=src --cov-report=xml
          
      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-report
          path: coverage.xml
          
  build:
    name: Build and Push Container
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        
      - name: Configure Docker to use gcloud credentials
        run: |
          gcloud auth configure-docker ${{ env.GCR_REGISTRY }}
          
      - name: Build Docker image
        run: |
          docker build -t ${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
          
      - name: Push Docker image to Google Container Registry
        run: |
          docker push ${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
          
      - name: Save image reference for deployment
        run: |
          echo "IMAGE_URL=${{ env.GCR_REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_ENV
          
  deploy-staging:
    name: Deploy to Staging
    needs: build
    runs-on: ubuntu-latest
    environment: staging
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        
      - name: Deploy to Confidential VM in Staging
        run: |
          # Extract TEE requirements from config
          MACHINE_TYPE=$(grep 'machine_type' ${{ env.TEE_CONFIG_PATH }} | cut -d':' -f2 | xargs)
          
          # Default to n2d-standard-2 if not specified
          if [ -z "$MACHINE_TYPE" ]; then
            MACHINE_TYPE="n2d-standard-2"
          fi
          
          # Create or update Confidential VM instance for staging
          gcloud compute instances create-with-container ev0x-staging \
            --confidential-compute \
            --maintenance-policy=TERMINATE \
            --machine-type=$MACHINE_TYPE \
            --container-image=${{ env.IMAGE_URL }} \
            --shielded-secure-boot \
            --zone=${{ secrets.GCP_ZONE }} \
            --scopes=cloud-platform \
            --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }} \
            --container-env=ENVIRONMENT=staging \
            --tags=staging \
            --create-disk=boot=yes,auto-delete=yes,image-project=confidential-vm-images,image-family=confidential-vm-ubuntu-2204
            
      - name: Run post-deployment tests
        run: |
          # Wait for the instance to be fully running
          sleep 60
          
          # Get the external IP
          EXTERNAL_IP=$(gcloud compute instances describe ev0x-staging --zone=${{ secrets.GCP_ZONE }} --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          
          # Run simple health check
          curl -sSf http://$EXTERNAL_IP/health || (echo "Health check failed" && exit 1)
          
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        
      - name: Deploy to Confidential VM in Production
        run: |
          # Extract TEE requirements from config
          MACHINE_TYPE=$(grep 'machine_type' ${{ env.TEE_CONFIG_PATH }} | cut -d':' -f2 | xargs)
          
          # Default to n2d-standard-2 if not specified
          if [ -z "$MACHINE_TYPE" ]; then
            MACHINE_TYPE="n2d-standard-2"
          fi
          
          # Create or update Confidential VM instance for production
          gcloud compute instances create-with-container ev0x-production \
            --confidential-compute \
            --maintenance-policy=TERMINATE \
            --machine-type=$MACHINE_TYPE \
            --container-image=${{ env.IMAGE_URL }} \
            --shielded-secure-boot \
            --zone=${{ secrets.GCP_ZONE }} \
            --scopes=cloud-platform \
            --service-account=${{ secrets.GCP_SERVICE_ACCOUNT }} \
            --container-env=ENVIRONMENT=production \
            --tags=production \
            --create-disk=boot=yes,auto-delete=yes,image-project=confidential-vm-images,image-family=confidential-vm-ubuntu-2204
            
      - name: Run post-deployment tests
        run: |
          # Wait for the instance to be fully running
          sleep 60
          
          # Get the external IP
          EXTERNAL_IP=$(gcloud compute instances describe ev0x-production --zone=${{ secrets.GCP_ZONE }} --format='get(networkInterfaces[0].accessConfigs[0].natIP)')
          
          # Run health and smoke tests
          curl -sSf http://$EXTERNAL_IP/health || (echo "Health check failed" && exit 1)
          curl -sSf http://$EXTERNAL_IP/status || (echo "Status check failed" && exit 1)
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "Deployment to production successful!"
          else
            echo "Deployment to production failed!"
          fi

