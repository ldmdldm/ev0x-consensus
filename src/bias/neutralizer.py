"""Bias neutralization implementation for the ev0x project."""

import logging
from typing import Dict, List, Any, Optional
import re
from src.bias.detector import BiasReport

# Initialize logger
logger = logging.getLogger(__name__)

class BiasNeutralizer:
    """
    Neutralizer for reducing or eliminating bias in AI model outputs.
    
    This class implements automated bias correction mechanisms based on
    bias reports generated by the BiasDetector.
    """
    
    def __init__(self, config_path: Optional[str] = None):
        """
        Initialize the bias neutralizer.
        
        Args:
            config_path: Optional path to configuration file
        """
        # Bias neutralization strategies
        self.strategies = {
            "gender": self._neutralize_gender_bias,
            "political": self._neutralize_political_bias,
            "racial": self._neutralize_racial_bias,
            "cultural": self._neutralize_cultural_bias,
            "age": self._neutralize_age_bias,
            "socioeconomic": self._neutralize_socioeconomic_bias
        }
        
        # Load configuration if provided
        if config_path:
            try:
                with open(config_path, 'r') as f:
                    self.config = json.load(f)
            except Exception as e:
                logger.error(f"Failed to load bias neutralizer config: {e}")
                self.config = {}
        else:
            self.config = {}
    
    def neutralize(self, predictions: List[Dict[str, Any]], 
                bias_report: Optional[BiasReport] = None) -> List[Dict[str, Any]]:
        """
        Neutralize bias in model predictions.
        
        Args:
            predictions: List of model predictions
            bias_report: Optional bias report to guide neutralization
            
        Returns:
            List of neutralized predictions
        """
        if not bias_report or not bias_report.detected_biases:
            return predictions
        
        neutralized_predictions = []
        
        for prediction in predictions:
            output = prediction.get("output", "")
            
            # Apply neutralization strategies for detected biases
            for bias_type, bias_score in bias_report.detected_biases.items():
                if bias_score > 0.3 and bias_type in self.strategies:
                    output = self.strategies[bias_type](output, bias_score)
            
            # Create neutralized prediction
            neutralized_prediction = prediction.copy()
            neutralized_prediction["output"] = output
            neutralized_prediction["neutralized"] = True
            neutralized_prediction["bias_score_before"] = bias_report.bias_score
            neutralized_prediction["bias_types_addressed"] = list(bias_report.detected_biases.keys())
            
            neutralized_predictions.append(neutralized_prediction)
        
        return neutralized_predictions
    
    def _neutralize_gender_bias(self, content: str, bias_score: float) -> str:
        """
        Neutralize gender bias in the content.
        
        Args:
            content: The content to neutralize
            bias_score: The detected bias score
            
        Returns:
            The neutralized content
        """
        # Replace gendered pronouns with neutral alternatives
        content = re.sub(r'\b(he|him|his)\b', 'they/them', content, flags=re.IGNORECASE)
        content = re.sub(r'\b(she|her|hers)\b', 'they/them', content, flags=re.IGNORECASE)
        
        # Replace gendered terms with neutral alternatives
        content = re.sub(r'\b(man|woman)\b', 'person', content, flags=re.IGNORECASE)
        content = re.sub(r'\b(men|women)\b', 'people', content, flags=re.IGNORECASE)
        
        logger.info(f"Applied gender bias neutralization (score: {bias_score:.2f})")
        return content
    
    def _neutralize_political_bias(self, content: str, bias_score: float) -> str:
        """
        Neutralize political bias in the content.
        
        Args:
            content: The content to neutralize
            bias_score: The detected bias score
            
        Returns:
            The neutralized content
        """
        # Replace politically charged terms with neutral alternatives
        politically_charged_terms = {
            r'\b(liberal|leftist|democrat)\b': 'person with progressive views',
            r'\b(conservative|right-wing|republican)\b': 'person with traditional views',
            r'\b(radical|extremist)\b': 'person with strong views',
        }
        
        for term, replacement in politically_charged_terms.items():
            content = re.sub(term, replacement, content, flags=re.IGNORECASE)
        
        logger.info(f"Applied political bias neutralization (score: {bias_score:.2f})")
        return content
    
    def _neutralize_racial_bias(self, content: str, bias_score: float) -> str:
        """
        Neutralize racial bias in the content.
        
        Args:
            content: The content to neutralize
            bias_score: The detected bias score
            
        Returns:
            The neutralized content
        """
        # Remove race-specific assumptions and stereotypes
        racial_stereotypes = self.config.get("racial_stereotypes", {})
        
        for stereotype, replacement in racial_stereotypes.items():
            content = re.sub(stereotype, replacement, content, flags=re.IGNORECASE)
        
        logger.info(f"Applied racial bias neutralization (score: {bias_score:.2f})")
        return content
    
    def _neutralize_cultural_bias(self, content: str, bias_score: float) -> str:
        """
        Neutralize cultural bias in the content.
        
        Args:
            content: The content to neutralize
            bias_score: The detected bias score
            
        Returns:
            The neutralized content
        """
        # Replace western-centric assumptions with culturally neutral language
        cultural_terms = self.config.get("cultural_terms", {})
        
        for term, replacement in cultural_terms.items():
            content = re.sub(term, replacement, content, flags=re.IGNORECASE)
        
        logger.info(f"Applied cultural bias neutralization (score: {bias_score:.2f})")
        return content
    
    def _neutralize_age_bias(self, content: str, bias_score: float) -> str:
        """
        Neutralize age bias in the content.
        
        Args:
            content: The content to neutralize
            bias_score: The detected bias score
            
        Returns:
            The neutralized content
        """
        # Replace age-biased terms with neutral alternatives
        age_biased_terms = {
            r'\b(old|elderly|senior)\b': 'older adult',
            r'\b(young|kid|juvenile)\b': 'younger person',
            r'\b(boomer|millennial|gen z)\b': 'person',
        }
        
        for term, replacement in age_biased_terms.items():
            content = re.sub(term, replacement, content, flags=re.IGNORECASE)
        
        logger.info(f"Applied age bias neutralization (score: {bias_score:.2f})")
        return content
    
    def _neutralize_socioeconomic_bias(self, content: str, bias_score: float) -> str:
        """
        Neutralize socioeconomic bias in the content.
        
        Args:
            content: The content to neutralize
            bias_score: The detected bias score
            
        Returns:
            The neutralized content
        """
        # Replace socioeconomic-biased terms with neutral alternatives
        socioeconomic_terms = {
            r'\b(poor|low-income|disadvantaged)\b': 'economically challenged',
            r'\b(rich|wealthy|affluent)\b': 'economically privileged',
            r'\b(unemployed|jobless)\b': 'currently seeking employment',
        }
        
        for term, replacement in socioeconomic_terms.items():
            content = re.sub(term, replacement, content, flags=re.IGNORECASE)
        
        logger.info(f"Applied socioeconomic bias neutralization (score: {bias_score:.2f})")
        return content
